// Copyright Â© Loft Orbital Solutions Inc.
// Use of this source code is governed by a Apache-2.0-style
// license that can be found in the LICENSE file.

// Code generated by mockery v2.52.1. DO NOT EDIT.

package grpc

import (
	context "context"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// MockServerStream is an autogenerated mock type for the ServerStream type
type MockServerStream struct {
	mock.Mock
}

type MockServerStream_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerStream) EXPECT() *MockServerStream_Expecter {
	return &MockServerStream_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with no fields
func (_m *MockServerStream) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockServerStream_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockServerStream_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockServerStream_Expecter) Context() *MockServerStream_Context_Call {
	return &MockServerStream_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockServerStream_Context_Call) Run(run func()) *MockServerStream_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerStream_Context_Call) Return(_a0 context.Context) *MockServerStream_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerStream_Context_Call) RunAndReturn(run func() context.Context) *MockServerStream_Context_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function with given fields: m
func (_m *MockServerStream) RecvMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerStream_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type MockServerStream_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *MockServerStream_Expecter) RecvMsg(m interface{}) *MockServerStream_RecvMsg_Call {
	return &MockServerStream_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *MockServerStream_RecvMsg_Call) Run(run func(m any)) *MockServerStream_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockServerStream_RecvMsg_Call) Return(_a0 error) *MockServerStream_RecvMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerStream_RecvMsg_Call) RunAndReturn(run func(any) error) *MockServerStream_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeader provides a mock function with given fields: _a0
func (_m *MockServerStream) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerStream_SendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeader'
type MockServerStream_SendHeader_Call struct {
	*mock.Call
}

// SendHeader is a helper method to define mock.On call
//   - _a0 metadata.MD
func (_e *MockServerStream_Expecter) SendHeader(_a0 interface{}) *MockServerStream_SendHeader_Call {
	return &MockServerStream_SendHeader_Call{Call: _e.mock.On("SendHeader", _a0)}
}

func (_c *MockServerStream_SendHeader_Call) Run(run func(_a0 metadata.MD)) *MockServerStream_SendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MD))
	})
	return _c
}

func (_c *MockServerStream_SendHeader_Call) Return(_a0 error) *MockServerStream_SendHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerStream_SendHeader_Call) RunAndReturn(run func(metadata.MD) error) *MockServerStream_SendHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function with given fields: m
func (_m *MockServerStream) SendMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerStream_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type MockServerStream_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *MockServerStream_Expecter) SendMsg(m interface{}) *MockServerStream_SendMsg_Call {
	return &MockServerStream_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *MockServerStream_SendMsg_Call) Run(run func(m any)) *MockServerStream_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockServerStream_SendMsg_Call) Return(_a0 error) *MockServerStream_SendMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerStream_SendMsg_Call) RunAndReturn(run func(any) error) *MockServerStream_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function with given fields: _a0
func (_m *MockServerStream) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerStream_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type MockServerStream_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - _a0 metadata.MD
func (_e *MockServerStream_Expecter) SetHeader(_a0 interface{}) *MockServerStream_SetHeader_Call {
	return &MockServerStream_SetHeader_Call{Call: _e.mock.On("SetHeader", _a0)}
}

func (_c *MockServerStream_SetHeader_Call) Run(run func(_a0 metadata.MD)) *MockServerStream_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MD))
	})
	return _c
}

func (_c *MockServerStream_SetHeader_Call) Return(_a0 error) *MockServerStream_SetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerStream_SetHeader_Call) RunAndReturn(run func(metadata.MD) error) *MockServerStream_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *MockServerStream) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}

// MockServerStream_SetTrailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrailer'
type MockServerStream_SetTrailer_Call struct {
	*mock.Call
}

// SetTrailer is a helper method to define mock.On call
//   - _a0 metadata.MD
func (_e *MockServerStream_Expecter) SetTrailer(_a0 interface{}) *MockServerStream_SetTrailer_Call {
	return &MockServerStream_SetTrailer_Call{Call: _e.mock.On("SetTrailer", _a0)}
}

func (_c *MockServerStream_SetTrailer_Call) Run(run func(_a0 metadata.MD)) *MockServerStream_SetTrailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.MD))
	})
	return _c
}

func (_c *MockServerStream_SetTrailer_Call) Return() *MockServerStream_SetTrailer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerStream_SetTrailer_Call) RunAndReturn(run func(metadata.MD)) *MockServerStream_SetTrailer_Call {
	_c.Run(run)
	return _c
}

// NewMockServerStream creates a new instance of MockServerStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerStream {
	mock := &MockServerStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
